name: nerf-blender-${basename:${dataset.root_dir}}
tag: ""
seed: 42
dataset:
  name: blender
  root_dir: ./data/images/${dataset.obj_name}
  obj_name: 45135
  camera_dir: ./data/camera/
  img_wh:
    - 800
    - 800
  img_downscale: 4 # specify training image size by either img_wh or img_downscale
  up_est_method: ground # if true, use estimated ground plane normal direction as up direction
  center_est_method: lookat
  n_test_traj_steps: 120
  apply_mask: false
  load_data_on_gpu: true
  view_downsample: true
  n_downsample: 64
  random_downsample: false
  num_frames: 100
  num_states: 4
  states_list: [11, 13, 15, 17]
  real_images: false 
  multi_joint_interpolation: false
  gradual_interpolation: false
  use_pixel_centers: true
  gt_mesh_path: ./data/sapien/${dataset.obj_name}



model:
  name: nerf
  radius: 1.5
  num_samples_per_ray: 2048
  train_num_rays: 1024
  max_train_num_rays: 8192
  grid_prune: false
  dynamic_ray_sampling: true
  batch_image_sampling: true
  randomized: true
  ray_chunk: 8192
  render_step_size: 0.005
  learned_background: true
  background_color: white
  motion_gt_path: ./data/sapien/${dataset.obj_name}/textured_objs

  geometry:
    name: volume-density
    data_dir: ${basename:${dataset.root_dir}}
    radius: ${model.radius}
    feature_dim: 16
    density_activation: trunc_exp
    density_bias: -1
    num_states : ${dataset.num_states}
    interpolation: False
    gradual_interpolation: False
    factor: 0.5
    save_embeddings: False
    real_images: false 
    multi_joint_interpolation: false
    latent_manifold: true
    occ_reg: true
    depth_reg: true
    isosurface:
      method: mc
      resolution: 256
      chunk: 2097152
      threshold: 5.0
    xyz_encoding_config:
      otype: HashGrid
      n_levels: 16
      n_features_per_level: 2
      log2_hashmap_size: 19
      base_resolution: 16
      per_level_scale: 1.447269237440378
    mlp_network_config:
      otype: BatchVanillaMLP
      activation: ReLU
      output_activation: none
      n_neurons: 64
      n_hidden_layers: 1
    hyper_net:
      layers:  # Layer to use for hypernet. Defaults to all layers.
      num_layers: 1 # num layers for hypernet. Defaults to 1
      hidden_dim: 64 # hidden dim for hypernet. Defaults to 64
      type: 'mlp'
      output_type: 'soft_mask' #weights,soft_mask,low_rank
      nl: 'tanh' #tanh,relu,leakyrelu
      mask_rank: 10 #if soft_mask, rank of the predictions.
      mask_act: 'demod' #demod,tanh,sigmoid.
    latent_network:
      type: 'train_latents'
      dim: 512
      random_latent: False #just use a random latent.
      use_clip: False # Whether to use CLIP embeddings along with latent.
      spatial_latent: False
      time_pos_encodings: False
  texture:
    name: volume-radiance
    input_feature_dim: ${model.geometry.feature_dim}
    data_dir: ${basename:${dataset.root_dir}}
    num_states: ${dataset.num_states}
    interpolation: False
    gradual_interpolation: False
    factor: 0.5
    save_embeddings: ${model.geometry.save_embeddings}
    real_images: false 
    multi_joint_interpolation: false
    dir_encoding_config:
      otype: SphericalHarmonics
      degree: 4
    mlp_network_config:
      otype: BatchVanillaMLP
      activation: ReLU
      output_activation: Sigmoid
      n_neurons: 64
      n_hidden_layers: 2
    hyper_net:
      layers:  # Layer to use for hypernet. Defaults to all layers.
      num_layers: ${model.geometry.hyper_net.num_layers} # num layers for hypernet. Defaults to 1
      hidden_dim: 64 # hidden dim for hypernet. Defaults to 64
      type: 'mlp'
      output_type: 'soft_mask' #weights,soft_mask,low_rank
      nl: 'tanh' #tanh,relu,leakyrelu
      mask_rank: 10 #if soft_mask, rank of the predictions.
      mask_act: 'demod' #demod,tanh,sigmoid.
    latent_network:
      type: 'train_latents'
      dim: ${model.geometry.latent_network.dim}
      random_latent: False #just use a random latent.
      use_clip: False # Whether to use CLIP embeddings along with latent.
      spatial_latent: False
      time_pos_encodings: ${model.geometry.latent_network.time_pos_encodings}
system:
  name: nerf-system
  loss:
    lambda_rgb: 1.
    lambda_distortion: 0.0
    lambda_mask: 0.01
    lambda_blend_ratio: 0.0
    lambda_part_mask: 0.05
    latent_manifold_neighbors: 1
    lambda_latent_manifold: 0.0
    lambda_depth_smoothness: 0.001
    patch_size: 32
    regularization_range: 15
    lambda_occlusion_reg: 0.001
    eval_CD: False
  optimizer:
    name: AdamW
    args:
      lr: 0.002
      betas: [0.9, 0.99]
      eps: 1.e-15
  scheduler:
    name: MultiStepLR
    interval: step
    args:
      milestones: [10000, 15000, 18000]
      gamma: 0.5

checkpoint:
  save_top_k: -1
  every_n_train_steps: ${trainer.max_steps}

export:
  chunk_size: 2097152
  export_vertex_color: False

trainer:
  max_steps: 20000
  log_every_n_steps: 200
  num_sanity_val_steps: 0
  val_check_interval: 5000
  limit_train_batches: 1.0
  limit_val_batches: 3
  limit_test_batches: null
  enable_progress_bar: true
  precision: 16-mixed